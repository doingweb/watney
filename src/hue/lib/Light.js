const api = require('./api'),
  logger = require('./logger'),
  { emitter, LIGHT_STATE_CHANGE } = require('./events'),
  awaitableWrap = require('./awaitableWrap'),
  { getOnState, getOffState } = require('./states');
/** @typedef {{ on: boolean, bri: number }} LightState */

/**
 * An individual lighting device (e.g., a bulb).
 *
 * @class Light
 */
module.exports = class Light {
  /**
   * Creates an instance of Light.
   * @param {number} lightId The ID of the light.
   */
  constructor(lightId) {
    this.id = lightId;
  }

  /**
   * Turns the light on.
   *
   * @param {number} brightness A decimal value from 0 to 1,
   *  representing how bright to set the light.
   * @param {number} transitionSeconds The length of time
   *  in seconds that the transition to the new state should last.
   */
  async on(brightness, transitionSeconds) {
    await this.setState(getOnState(brightness, transitionSeconds));
  }

  /**
   * Turns the light off.
   *
   * @param {number} transitionSeconds The length of time
   *  in seconds that the transition to the new state should last.
   */
  async off(transitionSeconds) {
    await this.setState(getOffState(transitionSeconds));
  }

  /**
   * Sets the state of the light.
   *
   * @param {LightState} state A light state object generated by node-hue-api.
   */
  async setState(state) {
    logger.log(`Changing state of light ${this.id} to ${JSON.stringify(state)}.`);

    try {
      await awaitableWrap(api.setLightState(this.id, state));

      logger.log(`Light ${this.id} state successfully changed.`);
      emitter.emit(LIGHT_STATE_CHANGE, this.id, state);
    }
    catch (error) {
      logger.log(`Error changing state of light ${this.id}: ${error}`);
    }
  }

  /**
   * Gets the state of the light.
   *
   * @returns {Promise<LightState>} A light state object from node-hue-api.
   */
  async getState() {
    let light = await awaitableWrap(api.getLightStatus(this.id));
    return light.state;
  }
}
